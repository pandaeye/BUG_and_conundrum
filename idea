Idle
move
jump_start
jump_air
jump_end
hit
maic

move-hit         stop start
move-jump        stop start
jump_start-move  wait
jump_start-hit   wait
jump_air-move    wait
jump_air-hit
jump_end-move    wait
jump_end-hit     wait
hit-move         wait
hit-jump         wait

武器
刀，散弹枪，炮
技能与道具融合:
地雷（cd：1s），环绕守护刀（可发射），
侧移
反弹
无敌
霸体
弹反
毒：减速
出血：增加每一击伤害
治疗

文件结构，以数据块形式存储，暂时定义两个数据块。
文件开头是多个CHUNK的列表，最后一个CHUNK的ID为0，结束之后是各个CHUNK的详细内容
数据块定义
CHUNK
{
	unsigned char ID;//数据块的ID，0为空
	int pChunk；//数据块的地址
};
FILE_INFO
{
	int width;//图片宽
	int height;//图片高
	unsigned char depth；//图片色深类型（0:24位真彩，每个像素占4字节，分别是rgba）
	unsigned char store；//图片存储方式（比如索引方式，位图数据方式等）
};
DATA
{
	unsigned char r;
	unsigned char g;
	unsigned char b;
	unsigned char a;
};

MainScene::MainScene(void)
{
	WL_InputManager::m_gInputManager = new WL_InputManager();
	WL_AnimationManager::m_gAnimationManager = new WL_AnimationManager();
	WL_DB::m_gDB = new WL_DB("DB.db");
	WL_ImageStore::m_gImageStore = new WL_ImageStore();
	WL_RanderManager::m_gRanderManager = new WL_RanderManager();

	WL_Player* player = new WL_Player();
	m_vecPlayer.push_back(player);
}
MainScene::~MainScene(void)
{
	if(WL_InputManager::m_gInputManager != NULL)
	{
		delete WL_InputManager::m_gInputManager;
		WL_InputManager::m_gInputManager = nullptr;
	}
	if(WL_AnimationManager::m_gAnimationManager != NULL)
	{
		delete WL_AnimationManager::m_gAnimationManager;
		WL_AnimationManager::m_gAnimationManager = nullptr;
	}
	if(WL_DB::m_gDB != NULL)
	{
		delete WL_DB::m_gDB;
		WL_DB::m_gDB = nullptr;
	}
	if(WL_ImageStore::m_gImageStore != NULL)
	{
		delete WL_ImageStore::m_gImageStore;
		WL_ImageStore::m_gImageStore = nullptr;
	}
	if(WL_RanderManager::m_gRanderManager != NULL)
	{
		delete WL_RanderManager::m_gRanderManager;
		WL_RanderManager::m_gRanderManager = nullptr;
	}

	for(unsigned int i = 0;i<m_vecPlayer.size();i++)
	{
		delete m_vecPlayer[i];
		m_vecPlayer[i] = nullptr;
	}
}
void MainScene::update(float dt)
{
	WL_InputManager::m_gInputManager->update();

	for(unsigned int i = 0;i<m_vecPlayer.size();i++)
	{
		m_vecPlayer[i]->update();
	}
//	WL_CollisionManager::m_gCollisionManager->update()
	
	this->removeAllChildren();
	CCSprite* sprite = nullptr;
	WL_Image* image = nullptr;
	std::map<int, WL_RanderObject*>::iterator iter;
	for(iter = WL_RanderManager::m_gRanderManager->m_mapRanderObjects.begin();iter != WL_RanderManager::m_gRanderManager->m_mapRanderObjects.end();iter++)
	{
		image = WL_ImageStore::m_gImageStore->CreateImage(iter->first);
		if(image == nullptr)
			break;
		CCLOG("%s", image->m_sFileName.c_str());
		sprite = CCSprite::create(image->m_sFileName.c_str());
		sprite->setPosition(CCPoint(iter->second->m_nDstX, iter->second->m_nDstY));
		if(iter->second->m_bRotationY == true)
		{
			sprite->setRotationY(180);
		}
		this->addChild(sprite,3);
	}
}


class WL_Player
{
pricate:
	vector<int> m_vecCollisionObject;//碰撞时需要处理的对象ID
	const int m_nUUID;
	int m_nID;
	PlayerState m_nState;
	WL_Animation* m_pAnimation;//每个animation在内存中只有一个实体，为了节省内存
	WL_Rander* m_pRander;//决定animation渲染方式，比如屏幕位置，旋转角度，是否反转等
	WL_Item* m_pWeapon;
	WL_Animation* m_pWeaponAnimation;
//	int m_nCurrentFrameIndex;
//	int m_nMaxFrame;
	int x;
	int y;
public:
	WL_Player():m_nRoleIDInDB(1)
	{
		m_nRoleIDInDB = 1;
//		m_pAction = new m_pAction(WL_AnimationState);
		m_nCurrentFrameIndex = 0;
		m_nMaxFrame = 0;
		x = 500;
		y = 500;
	}
	~WL_Plyer()
	{
//		delete m_pAction;
//		m_pAction = nullptr;
	}
	update()
	{
		//Idle
		if(WL_Animation->IsFinish())
		{
			WL_Animation = m_gAnimationManager->CreateAnimation(m_nRoleIDInDB, Idle);
			m_nState = Idle;
			if(m_pWeapon != nullptr)
			{
				m_pWeaponAnimation = m_gAnimationManager->CreateAnimation(m_pWeapon->GetUUID(), Idle);
				m_gCollisionManager->AddObject(m_pWeapon->GetID());
			}
		}
		//input
		bool bRalate = false;
		if(m_gInputManeger->IsPressed(KC_A))
		{
			x -= 2;
			if(m_nState != JumpAir && m_nState != Jump && m_nState != Run)
			{
				WL_Animation = m_gAnimationManager->CreateAnimation(m_nRoleIDInDB, Run);
				m_nState = Run;
				if(m_pWeapon != nullptr)
				{
					m_pWeaponAnimation = m_gAnimationManager->CreateAnimation(m_pWeapon->GetUUID(), Run);
				}
			}
		}
		if(m_gInputManeger->IsPressed(KC_D))
		{
			x++;
			if(m_nState != JumpAir && m_nState != Jump && m_nState != Run)
			{
				m_pAnimation = m_gAnimationManager->CreateAnimation(m_nRoleIDInDB, Run);
				m_nCurrentFrameIndex = 0;
				m_nMaxFrame = m_pAnimation->GetMaxFram();
				m_nState = Run;
			}
			bRalate = true;
		}
		if(m_gInputManeger->IsPressed(KC_M))
		{
			if(m_nState != JumpAir && m_nState != Jump)
			{
				m_pAnimation = m_gAnimationManager->CreateAnimation(m_nRoleIDInDB, Jump);
				m_nCurrentFrameIndex = 0;
				m_nMaxFrame = m_pAnimation->GetMaxFram();
				m_nState = Jump;
			}
			
		}
		if(m_gInputManeger->IsPressed(KC_J))
		{
			if(m_nState != Jump && m_nState != Attack)
			{
				m_pAnimation = m_gAnimationManager->CreateAnimation(m_nRoleIDInDB, Attack);
				m_nCurrentFrameIndex = 0;
				m_nMaxFrame = m_pAnimation->GetMaxFram();
				m_nState = Attack;
			}
		}

		//
		if(m_nState == Jump)
		{
			if(m_pRander->GetRanderFrameIndex()==3)
			{
				m_nState = JumpAir;
			}
		}

		//
		if(m_pAnimation != nullptr)
		{
			m_pRander = m_gRanderManeger->CreateRander(x, y, m_pAnimation->GetFrame(m_nCurrentFrameIndex);
			m_pRander->Ralate(bRalote);
		}
		m_nCurrentFrameIndex++;
	}
}


tabledata file :.td
ObjectID:所有类型都是object，每个object都有唯一UUID，运行后都有一个ID，同类型的object的UUID相同，但是id不同。包括人物，怪物，物品。
WL_UI
UIID(ObjectID) Image describe
WL_Skill:public
SkillID name Attack CD TimeToLive
WL_Weapon:
WeaponID Attack Defence Effect EffectValue
WL_Armour
ArmourID Defence
WL_Item
ItemID 
WL_Monster
WL_Object
WL_Skill

class WL_Animation
{
private:
	int m_nObjectID;
	int m_nTypeID;
	vector<int> m_vecFrame;
public:
	int Frame(int index);
	{
		m_vecFrame[index];
	}
}
class WL_Animation
{
public:
	int m_nObjectID;//对象在数据库里的UUID
	int m_nTypeID;//对象的动画类型，如跑，跳，攻击
	vector<int> m_vecFrame;//动画帧图片列表，保存的是图片ID
	WL_Animation(int nObjectID, int nTypeID)
	{
		m_nObjectID = nObjectID;
		m_nTypeID = nTypeID;
	}
	int GetMaxFrame()
	{
		return m_vecFrame.size();
	}
};

class WL_AnimationManager
{
private:
	map<int, WL_Animation*> m_mapAnimations;
public:
	static WL_AnimationManager* m_gAnimationManager;//int从1开始

	WL_AnimationManager(void);
	~WL_AnimationManager(void);
	WL_Animation* GetAnimation(int nAnimationID);
	WL_Animation* CreateAnimation(int nObjectID, int nTypeID);
};
WL_Animation* WL_AnimationManager::GetAnimation(int nAnimationID)
{
	if (m_mapAnimations.find(nAnimationID) == m_mapAnimations.end())
		return nullptr;
	else
		return m_mapAnimations[nAnimationID];
}

WL_Animation* WL_AnimationManager::CreateAnimation(int nObjectID, int nTypeID)
{
	WL_Animation* pAnimation = nullptr;
	do
	{
		//查找动画是否已经存在
		map<int, WL_Animation*>::iterator iter;
		for(iter = m_mapAnimations.begin();iter != m_mapAnimations.end();iter++) 
		{
			if(iter->second->m_nObjectID == nObjectID && iter->second->m_nTypeID == nTypeID)
			{
				return iter->second;
			}
		}
		//创建动画
		string sSql = "select AnimationID, Frame from WL_Animation where ObjectID = " + IntToString(nObjectID) + " and Type = " + IntToString(nTypeID);
		WL_DB::m_gDB->Execute(sSql);
		vector<map<string, string>> vecResult = WL_DB::m_gDB->GetResult();
		if(vecResult.size() != 1)//理论上只有一个动画
		{
			pAnimation = nullptr;
			break;
		}
		pAnimation=new WL_Animation(nObjectID, nTypeID);
		//m_mapAnimations[vecResult[0]["AnimationID"]] = pAnimation;
		int n = StringToInt(vecResult[0]["AnimationID"]);
		m_mapAnimations[n] = pAnimation;
		vector<string> vecFrame = WL_Split(vecResult[0]["Frame"], ",");//帧以 第1帧图片ID，第2帧图片ID，第3帧图片ID 的形式保存
		int nSize = vecFrame.size();
		for(int i = 0; i < nSize; i++)
			pAnimation->m_vecFrame.push_back(StringToInt(vecFrame[i]));
	}while(false);
	return pAnimation;
}
class WL_Image
{
public:
	string m_sFileName;
	int m_nSrcX;//该图片在图片文件中的坐标
	int m_nSrcY;
	int m_nWidth;
	int m_nHeight;
};

class WL_ImageStore
{
private:
	map<int, WL_Image*> m_mapImages;
	
public:
	static WL_ImageStore* m_gImageStore;

	WL_ImageStore(void);
	~WL_ImageStore(void);
	WL_Image* GetImage(int nImageId);
	WL_Image* CreateImage(int nImageId);
};
WL_Image* WL_ImageStore::GetImage(int nImageId)
{
	map<int, WL_Image*>::iterator iter = m_mapImages.find(nImageId);
	if(iter != m_mapImages.end())
	{
		return iter->second;
	}
	else
		return nullptr;
}

WL_Image* WL_ImageStore::CreateImage(int nImageId)
{
	WL_Image* pImage = nullptr;
	do
	{
		//²éÕÒÍ¼Æ¬ÊÇ·ñÒÑ¾­´æÔÚ
		pImage = GetImage(nImageId);
		if(pImage != nullptr)return pImage;
		//´´½¨Í¼Æ¬
		string sSql = "select FileName, SrcX, SrcY, Width, Height from WL_Image where ImageID = " + IntToString(nImageId);
		WL_DB::m_gDB->Execute(sSql);
		vector<map<string, string>> vecResult = WL_DB::m_gDB->GetResult();
		if(vecResult.size() != 1)//ÀíÂÛÉÏÖ»ÓÐÒ»¸ö¶¯»­
		{
			pImage = nullptr;
			break;
		}
		pImage=new WL_Image();
		pImage->m_sFileName = vecResult[0]["FileName"];
		pImage->m_nSrcX = StringToInt(vecResult[0]["SrcX"]);//¸ÃÍ¼Æ¬ÔÚÍ¼Æ¬ÎÄ¼þÖÐµÄ×ø±ê
		pImage->m_nSrcY = StringToInt(vecResult[0]["SrcY"]);
		pImage->m_nWidth = StringToInt(vecResult[0]["Width"]);
		pImage->m_nHeight = StringToInt(vecResult[0]["Height"]);

		m_mapImages[nImageId] = pImage;
	}while(false);
	return pImage;
}
class WL_RanderObject
{
public:
	int m_nDstX;//屏幕坐标
	int m_nDstY;
	float m_fAngle;//旋转角度
	bool m_bRotationX;//是否沿着X反转
	bool m_bRotationY;//是否沿着Y反转
};

class WL_RanderManager
{
private:
	
	
public:
	std::map<int, WL_RanderObject*> m_mapRanderObjects;
	static WL_RanderManager* m_gRanderManager;

	WL_RanderManager(void);
	~WL_RanderManager(void);
	WL_RanderObject* GetRanderObject(int nImageId);
	void AddRanderObject(int nDstX, int nDstY, int nImageId, float fAngle = 0, bool bRotationX = false, bool bRotationY = false);
};
WL_RanderObject* WL_RanderManager::GetRanderObject(int nImageId)
{
	std::map<int, WL_RanderObject*>::iterator iter = m_mapRanderObjects.find(nImageId);
	if(iter != m_mapRanderObjects.end())
	{
		return iter->second;
	}
	else
		return nullptr;
}

void WL_RanderManager::AddRanderObject(int nDstX, int nDstY, int nImageId, float fAngle, bool bRotationX, bool bRotationY)
{
	WL_RanderObject* pRanderObject = new WL_RanderObject();
	pRanderObject->m_nDstX = nDstX;
	pRanderObject->m_nDstY = nDstY;
	pRanderObject->m_fAngle = fAngle;
	pRanderObject->m_bRotationX = bRotationX;
	pRanderObject->m_bRotationY = bRotationY;
	m_mapRanderObjects[nImageId]=pRanderObject;
}
script
mineskill.py
def begin():
//	mine = CreateObject("mine");
	mine->SetPosition(player1.x, player1.y, 0.1/*z value*/);
	mine->SetAnimation("Idle");
	mine->SetCollision(Points[4]);
	mine->AddCollisionObject(IDs[]);
def end():
	nodo
mineObject.py
def collision(objs):
	DeleteObject("mine");
	boom = CreateObject("boom");
	boom->SetPosition(item.x, item.y, 0.1/*z value*/);
//	fire = CreateObject("fire");
//	SetPosition(fire, this.x, this.y);
	DeleteObject("boom", delay);
	foreach obj in objs
		SaveData(obj, "boom");
fireObject.py
def collision(objs):
	booms = LoadData("boom");
	foreach obj in objs
		if obj is not in booms:
			SetCharacter(obj, HP, GetCharacter(obj, HP) - 100);

FireLineSkill.py
angle = target.x/player1.x;
nFrame = 0;
def begin():
	CreateObject("FireLine", player1.x, player1.y, angle, "FireLine", 0.1);
def runing():
	ScaleObject("FireLine", 0.05/*x*/, 1/*Y*/);
def end():
	nodo

